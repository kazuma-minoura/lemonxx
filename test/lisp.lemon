
/*
 *
 * LISP, as John McCarthy intended it.  Before the parenthesis took over.
 * (IE - M-Expressions)
 *
 * http://www-formal.stanford.edu/jmc/recursive.pdf
 *
 * To prevent ambiguity and conflicts, assignment uses : instead of =
 */

%include{
#include <memory>
#include <numeric>
#include <algorithm>
#include <utility>

#include "lisp_main.h"
#include "lisp_cell.h"

#define LEMON_SUPER mexpr_parser
#define YYSTACKDEPTH 0
}

%code{
	std::unique_ptr<mexpr_parser> mexpr_parser::create() {
		return std::make_unique<yypParser>();
	}
}

%token_type    {Token}
%default_type {lisp::cell_ptr}

%left AND OR XOR.
%left EQ NE LT GT LE GE.
%left PLUS MINUS.
%left TIMES DIVIDE.
%right NOT.

program ::= .
program ::= statement_list.

%type statement_list {void}

statement_list ::= statement(E). {
	if (!error)
		printf("%s\n", E ? E->to_string().c_str() : "#<nil>");
	lisp::clear_temp_list();
	error = 0;
}

/*
statement_list ::= statement_list statement.
*/

statement(X) ::= variable_assignment(X). 

statement(X) ::= function_assignment(X).

statement(RV) ::= expression(E). {
	try {
		auto tmp = E->substitute(lisp::env);
		tmp = tmp->evaluate();
		RV = tmp;
	}
	catch(std::exception &e) {
		fprintf(stderr, "%s\n", e.what());
		error++;
	}
}


// these should also add to the table.
variable_assignment(RV) ::= SYMBOL(S) COLON expression(E) . {

	try {
		auto tmp = E->substitute(lisp::env);
		tmp = tmp->evaluate();
		auto label = lisp::make_symbol(S.stringValue);
		if (!error) lisp::env[label] = tmp;
		RV = tmp;
	}
	catch(std::exception &e) {
		fprintf(stderr, "%s\n", e.what());
		error++;
	}
}

// function call vs function definition has conflicts unless they use the same argument list.
// need to verify args are actually SYMBOLS and not arbitrary expressions later.

function_assignment(RV) ::= SYMBOL(S) function_call(F) COLON expression(E). {

	try {

		std::vector<lisp::symbol_cell_ptr> parameters;

		std::transform(F.begin(), F.end(), std::back_inserter(parameters),
			[](lisp::cell_ptr cell){ return cell->to_symbol(); }
		);

		auto label = lisp::make_symbol(S.stringValue);
		auto tmp = lisp::make_lambda(label, std::move(parameters), E);

		tmp = tmp->substitute(lisp::env);

		if (!error) lisp::env[label] = tmp;
		RV = tmp;
	}
	catch(std::exception &e) {
		fprintf(stderr, "%s\n", e.what());
		error++;
	}

}





/* ,\[[a;b;c]; a+b+c] */
lambda(RV) ::= LAMBDA LBRACKET function_call(F) SEMI expression(E) RBRACKET. {

	try {

		std::vector<lisp::symbol_cell_ptr> parameters;

		std::transform(F.begin(), F.end(), std::back_inserter(parameters),
			[](lisp::cell_ptr cell){ return cell->to_symbol(); }
		);

		RV = lisp::make_lambda(nullptr, std::move(parameters), E);
	}
	catch(std::exception &e) {
		fprintf(stderr, "%s\n", e.what());
		error++;
	}
}

function(RV) ::= SYMBOL(S) function_call(ARGS).
{ RV = lisp::make_function(lisp::make_symbol(S.stringValue), std::move(ARGS)); }

function(RV) ::= lambda(F) function_call(ARGS).
{ RV = lisp::make_function(F, std::move(ARGS)); }

function(RV) ::= function(F) function_call(ARGS).
{ RV = lisp::make_function(F, std::move(ARGS)); }


%token_class mul_op TIMES DIVIDE.
%token_class add_op PLUS MINUS.
%token_class logical_op AND OR XOR.
%token_class compare_op EQ NE LT GT GE LE.

expression(RV) ::= expression(L) logical_op(OP) expression(R).
{ RV = lisp::make_binary(@OP, L, R); }


expression(RV) ::= expression(L) compare_op(OP) expression(R).
{ RV = lisp::make_binary(@OP, L, R); }

expression(RV) ::= expression(L) add_op(OP) expression(R).
{ RV = lisp::make_binary(@OP, L, R); }

expression(RV) ::= expression(L) mul_op(OP) expression(R).
{ RV = lisp::make_binary(@OP, L, R); }

expression(RV) ::= NOT(OP) expression(E). 
{ RV = lisp::make_unary(@OP, E); } 

expression(RV) ::= PLUS(OP) expression(E). [NOT]
{ RV = lisp::make_unary(@OP, E); } 

expression(RV) ::= MINUS(OP) expression(E). [NOT]
{ RV = lisp::make_unary(@OP, E); } 

expression(X) ::= term(X).
expression(X) ::= conditional(X).
expression(X) ::= list(X).

term(RV) ::= INTEGER(I). { RV = lisp::make_integer(I.intValue); }
term(RV) ::= ATOM(A). { RV = lisp::make_atom(A.stringValue); }
term(RV) ::= SYMBOL(S). { RV = lisp::make_symbol(S.stringValue); }
term(X) ::= lambda(X) .
term(X) ::= function(X) . 



%type conditional_list {std::vector<lisp::cell_ptr> }
%type condition {std::vector<lisp::cell_ptr> }


conditional(RV) ::= LBRACKET conditional_list(L) RBRACKET.
{ RV = lisp::make_conditional(std::move(L)); }

conditional_list(C) ::= condition(C).

conditional_list(L) ::= conditional_list(L) SEMI condition(C). {
	L.insert(L.end(), C.begin(), C.end());
}

condition(RV) ::= expression(P) ARROW expression(E). {
	RV = { P, E };
}

/* lists: (), ( A . B) or (A, B, C) (A , B . C) */

list(RV) ::= LPAREN RPAREN. { RV = lisp::make_pair(nullptr, nullptr); /* ?? */ }

list(RV) ::= LPAREN expression_list(L) RPAREN. {

	RV = std::accumulate(L.rbegin(), L.rend(), lisp::cell_ptr(nullptr), [](lisp::cell_ptr cdr, lisp::cell_ptr car){
		return lisp::make_pair(car, cdr);
	});
}

list(RV) ::= LPAREN expression_list(L) DOT expression(E) RPAREN. {

	RV = std::accumulate(L.rbegin(), L.rend(), E, [](lisp::cell_ptr cdr, lisp::cell_ptr car){
		return lisp::make_pair(car, cdr);
	});
}

list(RV) ::= LPAREN error RPAREN. {
	fprintf(stderr, "Error parsing list.\n");
	RV = lisp::make_pair(nullptr, nullptr);
}


%type expression_list {std::vector<lisp::cell_ptr> }

expression_list(L) ::= expression(E) .
{ L.push_back(E); }

expression_list(L) ::= expression_list(L) COMMA expression(E) .
{ L.push_back(E); }

// parameter list, for function call or function definition.

%type function_call {std::vector<lisp::cell_ptr> }
%type opt_arg_list {std::vector<lisp::cell_ptr> }
%type arg_list {std::vector<lisp::cell_ptr> }

function_call(RV) ::=  LBRACKET opt_arg_list(X) RBRACKET.
{ RV = std::move(X); }

function_call ::= LBRACKET error RBRACKET. {
	fprintf(stderr, "Error parsing function parameters/arguments.\n");
}

opt_arg_list ::= .

opt_arg_list(L) ::= arg_list(L).

arg_list(L) ::= expression(E). { L.push_back(E); }
arg_list(L) ::= arg_list(L) SEMI expression(E). { L.push_back(E); }

